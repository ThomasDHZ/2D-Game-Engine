using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace LevelEditor
{
    public static class VulkanAPI
    {
        [DllImport("vulkan-1.dll")] public static extern VkResult vkEnumerateInstanceExtensionProperties(IntPtr pLayerName, ref UInt32 pPropertyCount, IntPtr pProperties);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkCreateInstance(IntPtr pCreateInfo, IntPtr pAllocator, out VkInstance pInstance);
        [DllImport("vulkan-1.dll")] public static extern void vkDestroyInstance(VkInstance instance, IntPtr pAllocator);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkEnumeratePhysicalDevices(VkInstance instance, ref uint pPhysicalDeviceCount, IntPtr pPhysicalDevices);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, IntPtr pFeatures);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, int format, IntPtr pFormatProperties);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, int format, VkImageType type, int tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, IntPtr pImageFormatProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, IntPtr pProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint pQueueFamilyPropertyCount, IntPtr pQueueFamilyProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, IntPtr pMemoryProperties);
        [DllImport("vulkan-1.dll")] public static extern IntPtr vkGetInstanceProcAddr(VkInstance instance, string pName);
        [DllImport("vulkan-1.dll")] public static extern IntPtr vkGetDeviceProcAddr(IntPtr device, string pName);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, IntPtr pCreateInfo, IntPtr pAllocator, out IntPtr pDevice);
        [DllImport("vulkan-1.dll")] public static extern void vkDestroyDevice(IntPtr device, IntPtr pAllocator);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkEnumerateInstanceVersion(out uint pApiVersion);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, IntPtr pBindInfos);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, IntPtr pBindInfos);
        [DllImport("vulkan-1.dll")] public static extern void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags pPeerMemoryFeatures);
        [DllImport("vulkan-1.dll")] public static extern void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask);
        [DllImport("vulkan-1.dll")] public static extern void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, out uint pPhysicalDeviceGroupCount, IntPtr pPhysicalDeviceGroupProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetImageMemoryRequirements2(VkDevice device, IntPtr pInfo, out VkMemoryRequirements2 pMemoryRequirements);
        [DllImport("vulkan-1.dll")] public static extern void vkGetBufferMemoryRequirements2(VkDevice device, IntPtr pInfo, out VkMemoryRequirements2 pMemoryRequirements);
        [DllImport("vulkan-1.dll")] public static extern void vkGetImageSparseMemoryRequirements2(VkDevice device, IntPtr pInfo, out uint pSparseMemoryRequirementCount, IntPtr pSparseMemoryRequirements);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 pFeatures);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 pProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 pFormatProperties);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, IntPtr pImageFormatInfo, out VkImageFormatProperties2 pImageFormatProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, out uint pQueueFamilyPropertyCount, IntPtr pQueueFamilyProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 pMemoryProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, IntPtr pFormatInfo, out uint pPropertyCount, IntPtr pProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
        [DllImport("vulkan-1.dll")] public static extern void vkGetDeviceQueue2(VkDevice device, IntPtr pQueueInfo, out VkQueue pQueue);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkCreateSamplerYcbcrConversion(VkDevice device, IntPtr pCreateInfo, IntPtr pAllocator, out VkSamplerYcbcrConversion pYcbcrConversion);
        [DllImport("vulkan-1.dll")] public static extern void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, IntPtr pAllocator);
        [DllImport("vulkan-1.dll")] public static extern VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, IntPtr pCreateInfo, IntPtr pAllocator, out VkDescriptorUpdateTemplate pDescriptorUpdateTemplate);
        [DllImport("vulkan-1.dll")] public static extern void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, IntPtr pAllocator);
        [DllImport("vulkan-1.dll")] public static extern void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, IntPtr pData);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, IntPtr pExternalBufferInfo, out VkExternalBufferProperties pExternalBufferProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, IntPtr pExternalFenceInfo, out VkExternalFenceProperties pExternalFenceProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, IntPtr pExternalSemaphoreInfo, out VkExternalSemaphoreProperties pExternalSemaphoreProperties);
        [DllImport("vulkan-1.dll")] public static extern void vkGetDescriptorSetLayoutSupport(VkDevice device, IntPtr pCreateInfo, out VkDescriptorSetLayoutSupport pSupport);


        public delegate VkResult PFN_vkCreateInstance(ref VkInstanceCreateInfo pCreateInfo, IntPtr pAllocator, out VkInstance pInstance);
        public delegate void PFN_vkDestroyInstance(VkInstance instance, IntPtr pAllocator);
        public delegate VkResult PFN_vkEnumeratePhysicalDevices(VkInstance instance, ref uint pPhysicalDeviceCount, IntPtr pPhysicalDevices);
        public delegate void PFN_vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures pFeatures);
        public delegate void PFN_vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties pFormatProperties);
        public delegate VkResult PFN_vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties pImageFormatProperties);
        public delegate void PFN_vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties pProperties);
        public delegate void PFN_vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, ref uint pQueueFamilyPropertyCount, IntPtr pQueueFamilyProperties);
        public delegate void PFN_vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties pMemoryProperties);
        public delegate IntPtr PFN_vkGetInstanceProcAddr(VkInstance instance, string pName);
        public delegate IntPtr PFN_vkGetDeviceProcAddr(VkDevice device, string pName);
        public delegate VkResult PFN_vkCreateDevice(VkPhysicalDevice physicalDevice, ref VkDeviceCreateInfo pCreateInfo, IntPtr pAllocator, out VkDevice pDevice);
        public delegate void PFN_vkDestroyDevice(VkDevice device, IntPtr pAllocator);
        public delegate VkResult PFN_vkEnumerateInstanceExtensionProperties(string pLayerName, ref uint pPropertyCount, IntPtr pProperties);
        public delegate VkResult PFN_vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, string pLayerName, ref uint pPropertyCount, IntPtr pProperties);
        public delegate VkResult PFN_vkEnumerateInstanceLayerProperties(ref uint pPropertyCount, IntPtr pProperties);
        public delegate VkResult PFN_vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, ref uint pPropertyCount, IntPtr pProperties);
        public delegate void PFN_vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue pQueue);
        public delegate VkResult PFN_vkQueueSubmit(VkQueue queue, uint submitCount, IntPtr pSubmits, VkFence fence);
        public delegate VkResult PFN_vkQueueWaitIdle(VkQueue queue);
        public delegate VkResult PFN_vkDeviceWaitIdle(VkDevice device);
        public delegate VkResult PFN_vkAllocateMemory(VkDevice device, ref VkMemoryAllocateInfo pAllocateInfo, IntPtr pAllocator, out VkDeviceMemory pMemory);
        public delegate void PFN_vkFreeMemory(VkDevice device, VkDeviceMemory memory, IntPtr pAllocator);
        public delegate VkResult PFN_vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, out IntPtr ppData);
        public delegate void PFN_vkUnmapMemory(VkDevice device, VkDeviceMemory memory);
        public delegate VkResult PFN_vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, IntPtr pMemoryRanges);
        public delegate VkResult PFN_vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, IntPtr pMemoryRanges);
        public delegate void PFN_vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out ulong pCommittedMemoryInBytes);
        public delegate VkResult PFN_vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
        public delegate VkResult PFN_vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
        public delegate void PFN_vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements pMemoryRequirements);
        public delegate void PFN_vkGetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements pMemoryRequirements);
        public delegate void PFN_vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint pSparseMemoryRequirementCount, IntPtr pSparseMemoryRequirements);
        public delegate void PFN_vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, ref uint pPropertyCount, IntPtr pProperties);
        public delegate VkResult PFN_vkQueueBindSparse(VkQueue queue, uint bindInfoCount, IntPtr pBindInfo, VkFence fence);
        public delegate VkResult PFN_vkCreateFence(VkDevice device, ref VkFenceCreateInfo pCreateInfo, IntPtr pAllocator, out VkFence pFence);
        public delegate void PFN_vkDestroyFence(VkDevice device, VkFence fence, IntPtr pAllocator);
        public delegate VkResult PFN_vkResetFences(VkDevice device, uint fenceCount, IntPtr pFences);
        public delegate VkResult PFN_vkGetFenceStatus(VkDevice device, VkFence fence);
        public delegate VkResult PFN_vkWaitForFences(VkDevice device, uint fenceCount, IntPtr pFences, VkBool32 waitAll, ulong timeout);
        public delegate VkResult PFN_vkCreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo pCreateInfo, IntPtr pAllocator, out VkSemaphore pSemaphore);
        public delegate void PFN_vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateEvent(VkDevice device, ref VkEventCreateInfo pCreateInfo, IntPtr pAllocator, out VkEvent pEvent);
        public delegate void PFN_vkDestroyEvent(VkDevice device, VkEvent @event, IntPtr pAllocator);
        public delegate VkResult PFN_vkGetEventStatus(VkDevice device, VkEvent @event);
        public delegate VkResult PFN_vkSetEvent(VkDevice device, VkEvent @event);
        public delegate VkResult PFN_vkResetEvent(VkDevice device, VkEvent @event);
        public delegate VkResult PFN_vkCreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo pCreateInfo, IntPtr pAllocator, out VkQueryPool pQueryPool);
        public delegate void PFN_vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, IntPtr pAllocator);
        public delegate VkResult PFN_vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, IntPtr dataSize, IntPtr pData, VkDeviceSize stride, VkQueryResultFlags flags);
        public delegate VkResult PFN_vkCreateBuffer(VkDevice device, ref VkBufferCreateInfo pCreateInfo, IntPtr pAllocator, out VkBuffer pBuffer);
        public delegate void PFN_vkDestroyBuffer(VkDevice device, VkBuffer buffer, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateBufferView(VkDevice device, ref VkBufferViewCreateInfo pCreateInfo, IntPtr pAllocator, out VkBufferView pView);
        public delegate void PFN_vkDestroyBufferView(VkDevice device, VkBufferView bufferView, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateImage(VkDevice device, ref VkImageCreateInfo pCreateInfo, IntPtr pAllocator, out VkImage pImage);
        public delegate void PFN_vkDestroyImage(VkDevice device, VkImage image, IntPtr pAllocator);
        public delegate void PFN_vkGetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource pSubresource, out VkSubresourceLayout pLayout);
        public delegate VkResult PFN_vkCreateImageView(VkDevice device, ref VkImageViewCreateInfo pCreateInfo, IntPtr pAllocator, out VkImageView pView);
        public delegate void PFN_vkDestroyImageView(VkDevice device, VkImageView imageView, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo pCreateInfo, IntPtr pAllocator, out VkShaderModule pShaderModule);
        public delegate void PFN_vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo pCreateInfo, IntPtr pAllocator, out VkPipelineCache pPipelineCache);
        public delegate void PFN_vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, IntPtr pAllocator);
        public delegate VkResult PFN_vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, out IntPtr pDataSize, IntPtr pData);
        public delegate VkResult PFN_vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, IntPtr pSrcCaches);
        public delegate VkResult PFN_vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, IntPtr pCreateInfos, IntPtr pAllocator, out IntPtr pPipelines);
        public delegate VkResult PFN_vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, IntPtr pCreateInfos, IntPtr pAllocator, out IntPtr pPipelines);
        public delegate void PFN_vkDestroyPipeline(VkDevice device, VkPipeline pipeline, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo pCreateInfo, IntPtr pAllocator, out VkPipelineLayout pPipelineLayout);
        public delegate void PFN_vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateSampler(VkDevice device, ref VkSamplerCreateInfo pCreateInfo, IntPtr pAllocator, out VkSampler pSampler);
        public delegate void PFN_vkDestroySampler(VkDevice device, VkSampler sampler, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, IntPtr pAllocator, out VkDescriptorSetLayout pSetLayout);
        public delegate void PFN_vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo pCreateInfo, IntPtr pAllocator, out VkDescriptorPool pDescriptorPool);
        public delegate void PFN_vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, IntPtr pAllocator);
        public delegate VkResult PFN_vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
        public delegate VkResult PFN_vkAllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo pAllocateInfo, out IntPtr pDescriptorSets);
        public delegate VkResult PFN_vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, IntPtr pDescriptorSets);
        public delegate void PFN_vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, IntPtr pDescriptorWrites, uint descriptorCopyCount, IntPtr pDescriptorCopies);
        public delegate VkResult PFN_vkCreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo pCreateInfo, IntPtr pAllocator, out VkFramebuffer pFramebuffer);
        public delegate void PFN_vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, IntPtr pAllocator);
        public delegate VkResult PFN_vkCreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo pCreateInfo, IntPtr pAllocator, out VkRenderPass pRenderPass);
        public delegate void PFN_vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, IntPtr pAllocator);
        public delegate void PFN_vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D pGranularity);
        public delegate VkResult PFN_vkCreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo pCreateInfo, IntPtr pAllocator, out VkCommandPool pCommandPool);
        public delegate void PFN_vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, IntPtr pAllocator);
        public delegate VkResult PFN_vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
        public delegate VkResult PFN_vkAllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo pAllocateInfo, out IntPtr pCommandBuffers);
        public delegate void PFN_vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, IntPtr pCommandBuffers);
        public delegate VkResult PFN_vkBeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo pBeginInfo);
        public delegate VkResult PFN_vkEndCommandBuffer(VkCommandBuffer commandBuffer);
        public delegate VkResult PFN_vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
        public delegate void PFN_vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
        public delegate void PFN_vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, IntPtr pViewports);
        public delegate void PFN_vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, IntPtr pScissors);
        public delegate void PFN_vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth);
        public delegate void PFN_vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
        public delegate void PFN_vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float[] blendConstants);
        public delegate void PFN_vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
        public delegate void PFN_vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask);
        public delegate void PFN_vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask);
        public delegate void PFN_vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference);
        public delegate void PFN_vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, IntPtr pDescriptorSets, uint dynamicOffsetCount, IntPtr pDynamicOffsets);
        public delegate void PFN_vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
        public delegate void PFN_vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, IntPtr pBuffers, IntPtr pOffsets);
        public delegate void PFN_vkCmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        public delegate void PFN_vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
        public delegate void PFN_vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
        public delegate void PFN_vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
        public delegate void PFN_vkCmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
        public delegate void PFN_vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
        public delegate void PFN_vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, IntPtr pRegions);
        public delegate void PFN_vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, IntPtr pRegions);
        public delegate void PFN_vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, IntPtr pRegions, VkFilter filter);
        public delegate void PFN_vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, IntPtr pRegions);
        public delegate void PFN_vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, IntPtr pRegions);
        public delegate void PFN_vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, IntPtr pData);
        public delegate void PFN_vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data);
        public delegate void PFN_vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue pColor, uint rangeCount, IntPtr pRanges);
        public delegate void PFN_vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue pDepthStencil, uint rangeCount, IntPtr pRanges);
        public delegate void PFN_vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, IntPtr pAttachments, uint rectCount, IntPtr pRects);
        public delegate void PFN_vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, IntPtr pRegions);
        public delegate void PFN_vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask);
        public delegate void PFN_vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask);
        public delegate void PFN_vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, IntPtr pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, IntPtr pMemoryBarriers, uint bufferMemoryBarrierCount, IntPtr pBufferMemoryBarriers, uint imageMemoryBarrierCount, IntPtr pImageMemoryBarriers);
        public delegate void PFN_vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, IntPtr pMemoryBarriers, uint bufferMemoryBarrierCount, IntPtr pBufferMemoryBarriers, uint imageMemoryBarrierCount, IntPtr pImageMemoryBarriers);
        public delegate void PFN_vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags);
        public delegate void PFN_vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query);
        public delegate void PFN_vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount);
        public delegate void PFN_vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint query);
        public delegate void PFN_vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
        public delegate void PFN_vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, IntPtr pValues);
        public delegate void PFN_vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo pRenderPassBegin, VkSubpassContents contents);
        public delegate void PFN_vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents);
        public delegate void PFN_vkCmdEndRenderPass(VkCommandBuffer commandBuffer);
        public delegate void PFN_vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, IntPtr pCommandBuffers);
    }
}
